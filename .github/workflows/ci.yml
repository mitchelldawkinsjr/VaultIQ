name: AskMyVideo CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: askmyvideo

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/core_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r core_requirements.txt
    
    - name: Set up Django settings
      run: |
        export DJANGO_SECRET_KEY="test-secret-key-for-ci"
        export DEBUG=True
    
    - name: Run Django migrations
      run: |
        python manage.py migrate
    
    - name: Run Django tests
      run: |
        python manage.py test
    
    - name: Check Django deployment readiness
      run: |
        python manage.py check --deploy --settings=video_recall_project.settings
    
    - name: Test health check endpoint
      run: |
        python manage.py runserver 8000 &
        sleep 10
        curl -f http://localhost:8000/health/ || exit 1
        pkill -f runserver

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run Black code formatter check
      run: |
        black --check --diff .
    
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .
    
    - name: Run flake8 linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ${REGISTRY}/${IMAGE_NAME}:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run --rm --name ${IMAGE_NAME}-test -d \
          -e DJANGO_SECRET_KEY="test-secret-key" \
          -e DEBUG=False \
          -p 8000:8000 \
          ${REGISTRY}/${IMAGE_NAME}:${{ github.sha }}
        
        # Wait for container to start
        sleep 15
        
        # Test health check
        curl -f http://localhost:8000/health/ || exit 1
        
        # Stop container
        docker stop ${IMAGE_NAME}-test
    
    - name: Test Docker Compose
      run: |
        # Create minimal docker-compose for testing
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          web:
            image: ${REGISTRY}/${IMAGE_NAME}:${{ github.sha }}
            ports:
              - "8000:8000"
            environment:
              - DEBUG=True
              - DJANGO_SECRET_KEY=test-secret-key
            depends_on:
              - redis
          redis:
            image: redis:7-alpine
        EOF
        
        docker-compose -f docker-compose.test.yml up -d
        sleep 20
        curl -f http://localhost:8000/health/ || exit 1
        docker-compose -f docker-compose.test.yml down

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check for vulnerabilities
      run: |
        safety check --json || true
    
    - name: Run bandit security linting
      run: |
        bandit -r . -f json || true 